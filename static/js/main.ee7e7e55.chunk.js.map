{"version":3,"sources":["wuzi/board.tsx","App.tsx","wuzi/gameLogic.ts","reportWebVitals.ts","index.tsx"],"names":["Square","props","className","onClick","value","Board","Array","keys","map","num","i","squares","App","useState","fill","history","setHistory","xIsNext","setxIsNext","winner","setWinner","stepNumber","setStepNumber","winStep","setWinStep","moves","step","move","desc","jumpTo","status","Helmet","charSet","hisCopy","slice","squCopy","length","winStatus","index","x","y","Math","floor","player","expand","dx","dy","calculateWinner","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee7e7e55.chunk.js","sourcesContent":["interface SquareProps {\r\n    value: string; \r\n    onClick: () => void;\r\n}\r\n\r\nconst Square = (props: SquareProps) => (\r\n    <button className=\"square\" onClick={() => props.onClick()}>\r\n        {props.value}\r\n    </button>\r\n);\r\n\r\ninterface BoardProps {\r\n    squares: string[];\r\n    onClick: (num: number) => void;\r\n}\r\n\r\nconst Board = (props: BoardProps) => {\r\n    const renderRow = (i: number) => {\r\n        return (\r\n            <div key={i} className=\"board-row\">\r\n                {[...new Array(15).keys()].map(num =>\r\n                    <Square key={num + i}\r\n                        value={props.squares[num + i]}\r\n                        onClick={() => props.onClick(num + i)} />)}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {[...new Array(15).keys()].map(num => renderRow(num * 15))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import { useState } from 'react';\nimport calculateWinner from './wuzi/gameLogic';\nimport Board from \"./wuzi/board\";\nimport { Helmet } from \"react-helmet\";\nimport './App.css'\ninterface WinStepType {\n  step: number;\n  winner: string;\n}\n\nfunction App() {\n  const [history, setHistory] = useState<string[][]>([new Array(15 * 15).fill(null)]);\n  const [xIsNext, setxIsNext] = useState(true);\n  const [winner, setWinner] = useState<string | null>(null);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [winStep, setWinStep] = useState<WinStepType | null>(null);\n  const handleClick = (i: number) => {\n      const hisCopy = history.slice(0, stepNumber + 1);\n      const squCopy = [...hisCopy[hisCopy.length - 1]];\n      if (squCopy[i] || winner) return;\n      squCopy[i] = xIsNext ? \"X\" : \"O\";\n      setHistory([...hisCopy, squCopy]);\n      setxIsNext(!xIsNext);\n      const winStatus = calculateWinner(squCopy, i);\n      setWinner(winStatus);\n      setStepNumber(hisCopy.length);\n      setWinStep(null);\n  };\n\n  const jumpTo = (step: number) => {\n      setStepNumber(step);\n      setxIsNext(step % 2 === 0);\n\n      if (step !== stepNumber && winner) { // Remember the win step\n          setWinStep({ step: stepNumber, winner: winner });\n          setWinner(null);\n      } else if (winStep && step === winStep.step) {\n          setWinner(winStep.winner);\n      }\n  };\n\n  const moves = history.map((step, move) => {\n      const desc = move ? \"Go to move #\" + move : \"Go to game start\";\n      return (\n          <li key={move}>\n              <button onClick={() => jumpTo(move)}>{desc}</button>\n          </li>\n      );\n  });\n\n\n  const status = winner ? \"Winner: \" + winner : \"Next Player: \" + (!xIsNext ? \"X\" : \"O\");\n\n  return (\n      <div className=\"game\">\n          <Helmet>\n              <meta charSet=\"utf-8\" />\n              <title>Gobang</title>\n          </Helmet>\n          <div className=\"game-board\">\n              <Board squares={history[stepNumber]}\n                  onClick={handleClick} />\n          </div>\n          <div className=\"game-info\">\n              <div>{status}</div>\n              <div>{moves}</div>\n          </div>\n      </div>\n  )\n}\n\nexport default App;\n","const nrow = 15, ncol = 15;\r\nexport default function calculateWinner(squares: string[], index: number): string | null {\r\n    /**\r\n     * The board is 15 * 15. try to calculate horizontal, vertial, uphild & downhill\r\n     */\r\n    const x = index % ncol, y = Math.floor(index / nrow), player = squares[index]; \r\n    const expand = (x:number, y:number, dx:number, dy:number): number => {\r\n        const i = y * nrow + x;\r\n        // Hit boundary, or \r\n        if (!x || x === ncol || !y || y === nrow || squares[i] !== player) return 0;\r\n        return 1 + expand(x + dx, y + dy, dx, dy);\r\n    }\r\n    // console.log(x, y, player);\r\n    // Horizontal\r\n\r\n    if (expand(x, y, 1, 0) + expand(x, y, -1, 0) > 5) return player;\r\n    // Vertical\r\n    if (expand(x, y, 0, 1) + expand(x, y, 0, -1) > 5) return player;\r\n    // Uphill\r\n    if (expand(x, y, 1, 1) + expand(x, y, -1, -1) > 5) return player;\r\n    // Downhill\r\n    if (expand(x, y, -1, 1) + expand(x, y, 1, -1) > 5) return player;\r\n    return null;\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from './App';\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}